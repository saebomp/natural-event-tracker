{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Maps.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","closeBox","id","title","event","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","ex","defaultProps","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAWeA,EARQ,SAAC,GAAwB,EAAvBC,IAAuB,EAAlBC,IAAmB,IAAdC,EAAa,EAAbA,QACjC,OACE,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACE,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCY3BG,EAhBS,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAI9B,OACE,sBAAKL,UAAU,gBAAf,UACE,qDACA,+BACE,uCAAUI,EAAKE,MACf,0CAAaF,EAAKG,YAEpB,mBAAGP,UAAU,WAAWD,QAVP,SAACS,GACpBH,EAASG,IASP,mBCRAC,EAAM,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAC/B,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAUN,EAAUO,KAAI,SAAAC,GAC5B,GAA2B,IAAxBA,EAAGC,WAAW,GAAGb,GAClB,OAAO,cAAC,EAAD,CACLT,IAAKqB,EAAGE,WAAW,GAAGC,YAAY,GAClCvB,IAAKoB,EAAGE,WAAW,GAAGC,YAAY,GAClCtB,QAAS,kBAAKgB,EAAgB,CAACT,GAAGY,EAAGZ,GAAIC,MAAMW,EAAGX,cASxD,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,IAAD,CACEsB,iBAAkB,CAACC,IAAI,2CACvBC,cAAeb,EACfc,YAAab,EAHf,SAKGI,IAEFF,GAAgB,cAAC,EAAD,CAAiBV,KAAMU,EAAcT,SAdzC,SAACqB,GAChBX,EAAgB,aAmBpBN,EAAIkB,aAAe,CACjBhB,OAAO,CACLd,IAAI,UACJC,KAAK,YAEPc,KAAK,GAEQH,QClCAmB,EARA,WACb,OACE,qBAAK5B,UAAU,SAAf,SACE,uECuBS6B,MAxBf,WACE,MAAkChB,mBAAS,IAA3C,mBAAOH,EAAP,KAAkBoB,EAAlB,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGKA,EAAIC,OAHT,gBAGXC,EAHW,EAGXA,OAEPR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDAQjBO,KAEC,IAED,gCACE,cAAC,EAAD,IACER,EAA0C,4CAAhC,cAAC,EAAD,CAAKrB,UAAWA,QCXnB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.765e7d78.chunk.js","sourcesContent":["import {Icon} from '@iconify/react'\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert'\r\n\r\nconst LocationMarker = ({lat, lng, onClick}) => {\r\n  return (\r\n    <div className=\"location-marker\" onClick={onClick}>\r\n      <Icon icon={locationIcon} className=\"location-icon\" />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LocationMarker","import {useState} from 'react'\r\n\r\nconst LocationInfoBox = ({info, closeBox}) => {\r\n  const handleChange = (event) => {\r\n    closeBox(event)\r\n  }\r\n  return (\r\n    <div className=\"location-info\">\r\n      <h2>Event Location Info</h2>\r\n      <ul>\r\n        <li>ID : {info.id}</li>\r\n        <li>TITLE : {info.title}</li>\r\n      </ul>\r\n      <p className=\"closeBtn\" onClick={handleChange}>X</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LocationInfoBox","import {useState} from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport LocationMarker from './LocationMarker'\r\nimport LocationInfoBox from './LocationInfoBox'\r\n\r\nconst Map = ({eventData, center, zoom}) => {\r\n  const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n  const markers = eventData.map(ev => {\r\n    if(ev.categories[0].id === 8) {\r\n      return <LocationMarker\r\n        lat={ev.geometries[0].coordinates[1]}\r\n        lng={ev.geometries[0].coordinates[0]}\r\n        onClick={()=> setLocationInfo({id:ev.id, title:ev.title})}\r\n      />\r\n    }\r\n  })\r\n  const closeBox = (ex) => {\r\n    setLocationInfo(null)\r\n  }\r\n  //LocationInfoBox에서 closeBox 펑션을 받아와서 locationInfo값을 null만듦 \r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{key:'AIzaSyDneP7oCKWNUEjS7CEc2WDEYF77nOm1Oxg'}}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n      >\r\n        {markers}\r\n      </GoogleMapReact>\r\n      {locationInfo && <LocationInfoBox info={locationInfo} closeBox={closeBox} />}\r\n      {/* locationInfo 가 true이면 LocationInfoBox 보여줌 */}\r\n    </div>\r\n  )\r\n}\r\n\r\nMap.defaultProps = {\r\n  center:{\r\n    lat:49.246292,\r\n    lng:-123.116226\r\n  },\r\n  zoom:6\r\n}\r\nexport default Map\r\n\r\n// https://stackoverflow.com/questions/55028583/how-do-i-call-setstate-from-another-component-in-reactjs","import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Wildfire Tracker (Powered By NASA)</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import { useState, useEffect } from 'react';\r\nimport Map from './components/Maps'\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  const [eventData, setEventData] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(()=> {\r\n    const fetchEvents = async () => {\r\n      setLoading(true)\r\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\r\n      const {events} = await res.json()\r\n\r\n      setEventData(events)\r\n      setLoading(false) //fetch 끝나면 loading 을 false로 만듬\r\n    }\r\n    fetchEvents()\r\n    // console.log(eventData)\r\n  }, []) //dependency array\r\n  return (\r\n    <div>\r\n      <Header />\r\n      {!loading ? <Map eventData={eventData} /> : <h1>Loading...</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// 29:35\r\n// https://www.youtube.com/watch?v=ontX4zfVqK8\r\n// AIzaSyDneP7oCKWNUEjS7CEc2WDEYF77nOm1Oxg      //googlemap api key\r\n// https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\r\n//loading 될때 이미지 material ui에서 넣을것\r\n// location info box 에서 x 누르면 locationInfo를 false로 바꿀것\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}